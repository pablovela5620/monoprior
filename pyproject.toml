[project]
name = "monopriors"
version = "0.1.0"
description = "Monocular Geometric Priors"
requires-python = ">=3.10.0"
readme = "README.md"

dependencies = [
    "opencv-python>=4.10.0.82",
    "geffnet>=1.0.2",
    "calibur>=0.0.1",
    "omnidata-tools>=0.0.23",
    "open3d>=0.18.0",
    "gradio-imageslider>=0.0.20",
    "gradio>=4.37.2",
    "gradio-rerun==0.0.3",
    "hf-transfer>=0.1.6",
    "mmcv-lite>=2.2.0",
    # pypi only
    "torch==2.3.0",
    "torchvision==0.18.0",
    "icecream>=2.1.3",
    "jaxtyping",
    "einops",
    "matplotlib",
    "wandb",
    "scipy",
    "timm",
    "pandas",
    "pyarrow",
    "pytorch-lightning",
    "jupyterlab",
    "rerun-sdk==0.16.1",
    "numpy<2.0.0",
    "beartype",
    "transformers",
    "xformers>=0.0.26.post1,<0.0.27",

]

[tool.setuptools.packages.find]
include = ["monopriors*"]

[tool.pixi.project]
channels = [
    "nvidia/label/cuda-11.8.0",
    "nvidia",
    "xformers",
    "conda-forge",
    "pytorch",
]
platforms = ["linux-64"]

[tool.pixi.system-requirements]
libc = { family = "glibc", version = "2.31" }

[tool.pixi.activation]
scripts = [".pixi.sh"]

[tool.pixi.tasks]
_install-wheel = "python -m pip install $WHL_PATH --force-reinstall"
_build-wheel = "python -m pip install build && python -m build"
upload-hf = { cmd = "python tools/upload_to_hf.py", depends_on = [
    "_build-wheel",
] }

[tool.pixi.tasks.download-example]
cmd = """
    test -e data/example-room-scan-poly.zip
    || (
        huggingface-cli download pablovela5620/sample-polycam-room \
        example-room-scan-poly.zip --repo-type dataset \
        --local-dir data/
    )
    """
outputs = ["data/example-room-scan-poly.zip"]
description = "Downloads an example polycam dataset from huggingface"

[tool.pixi.tasks.polycam-inference]
cmd = """
    python tools/inference_polycam.py \
    --zip-path data/example-room-scan-poly.zip
    """
depends_on = ["download-example"]
description = "Runs inference on polycam dataset on downloaded example, this will predict depths+normals"

[tool.pixi.tasks.app]
cmd = """
    python tools/gradio_app.py
    """
description = "Runs Gradio frontend for depth comparison"

[tool.pixi.tasks.dev-app]
cmd = """
    gradio tools/gradio_app.py
    """
description = "Runs Gradio frontend for hotreload"

[tool.pixi.feature.spaces.tasks.app]
cmd = """
    PYTORCH_JIT=0 python gradio_app.py
    """
description = "Runs Gradio frontend for depth comparison"
depends_on = ["_install-wheel"]

[tool.pixi.dependencies]
python = "3.10.*"
pip = "24.*"
cuda = { version = "*", channel = "nvidia/label/cuda-11.8.0" }
pytorch = { version = "2.3.0", channel = "pytorch" }
torchvision = { version = "0.18.0", channel = "pytorch" }
icecream = ">=2.1.3,<2.2"
jaxtyping = ">=0.2.28,<0.3"
einops = ">=0.8.0,<0.9"
matplotlib = ">=3.8.3,<3.9"
wandb = ">=0.16.5,<0.17"
scipy = ">=1.12.0,<1.13"
timm = ">=0.9.16,<0.10"
pandas = ">=2.2.2,<2.3"
pyarrow = ">=15.0.2,<15.1"
pytorch-lightning = ">=2.2.2,<2.3"
xformers = ">=0.0.26.post1,<0.0.27"
jupyterlab = ">=4.2.0,<4.3"
rerun-sdk = ">=0.16.1,<0.17"
numpy = "<2.0.0"
beartype = ">=0.18.5,<0.19"
transformers = ">=4.42.3,<4.43"
gradio = ">=4.37.2,<4.38"

[tool.pixi.pypi-dependencies]
monopriors = { path = ".", editable = true }

[tool.pixi.feature.spaces.pypi-dependencies]
spaces = "*"


[tool.pixi.environments]
spaces = { features = ["spaces"], solve-group = "default" }

[tool.ruff]
ignore = [
    "F722", # Forward annotation false positive from jaxtyping. Should be caught by pyright.
]
